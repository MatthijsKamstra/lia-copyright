package utils;

import sys.FileSystem;

class DateUtil {
	/**
	 * set file to contain the date when generated
	 *
	 * @param path		which folder to generate into
	 * @return String	the date of generation as String
	 */
	static public function setGenDate(path:String):String {
		var str:String = Date.now().toString();
		sys.io.File.saveContent('${path}/.gen.txt', str);
		return str;
	}

	/**
	 * @example
	 * 		trace(DateUtil.getGenDate(DIST));
	 *
	 * @param path		which folder to generate into
	 * @return Date		the date of generation
	 */
	static public function getGenDate(path:String):Date {
		var filePath = '${path}/.gen.txt';
		var content = '';
		if (FileSystem.exists(filePath)) {
			content = sys.io.File.getContent(filePath);
		} else {
			content = DateUtil.setGenDate(path);
		}
		var date = Date.fromString(content);
		return date;
	}

	/**
	 * [Description]
	 *
	 * @example
	 * 		trace(DateUtil.getGenTimeInMin(DIST) + ' minutes');
	 *
	 * @param path
	 * @return Int
	 */
	static public function getGenTimeInMin(path:String):Int {
		var date = DateUtil.getGenDate(path);
		var now = Date.now();
		var delta = now.getTime() - date.getTime();
		var minPassed = Math.round(delta / 1000 / 60);
		return minPassed;
	}

	/**
	 * First generated, need to reset?
	 *
	 * @example
	 * 		trace('Need to regenerate again? ${DateUtil.isTimePassed('path.to', 60)}');
	 *
	 * @param path		path to `.gen.txt`, generated by `DateUtil.setGenDate('path.to')` with generated time
	 * @param min		is the generation x-minutes ago
	 * @return Bool		is the time (in minutes) passed?
	 */
	static public function isTimePassed(path:String, min:Int):Bool {
		var date = DateUtil.getGenDate(path);
		var now = Date.now();
		var delta = now.getTime() - date.getTime();
		var minPassed = Math.round(delta / 1000 / 60);
		return (minPassed > min);
	}
}
